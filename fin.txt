// save the array generator:
args << range 16
// range 0 , 16 , 1


// display the array generator on the screen:
foreach ( i args )
  i [ print << true ]
// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15


// display the array generator on the screen:
foreach i , args
  i [ print << true ]
// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15


// demonstration of how adding to an array works:
j << 1 , 2 //  -  array { 1 2 }
//
j << 1 , 2 //  -  array { 1 2 1 2 }
//

// display the array on the screen:
foreach ( i j )
  i [ print << true ]
// 1 2 1 2


// demonstration of how assignment works:
j : 1 2 ; //  -  array { 1 2 }


// create an operator to display "i":
echo << array { i [ print << true ] }


// display the array on the screen:
foreach i , j
  echo //  -  i [ print << true ]
// 1 2


// array display:
j [ print << true ]
// array { 1 2 }


// the add method for this object redirects resources to the screen:
cout << j //  -  
// array { 1 2 }


// now this object does not assign anything to itself,
// losing all settings and methods, as well as data:
cout : ; //  -  


/*
  echo  -  now it is not an object for displaying data on the screen,
  but just an ordinary variable that has lost its methods, etc.
*/


// adding elements to an array:
cout << j //  -  array { 1 2 }
//


// after executing your script, the interpreter starts,
// so an explicit exit is required:
S_exit

/*
точнее исполнитель остановится и будет ожидать новые слова, которые вы сможите дописать сами или другой код паралельно.
S_exit - указывает исполнителю что дальше исполнять не нужно - символ для указания освободить память всех страниц.
S_end - указывает исполнителю что страница окончина и что дальше ресурсы если и есть исполнять их никак не нужно - это как символ конца файла - освобождает память страницы.
среда разработки - будет выглядить как обычный редактор с исполнителем в реальном времени.
exit - закрывает открытую страничку освобождая всю память выделнную на страничку.
у каждой страницы есть свои точки исполнения(мини исполнители), также свои данные мини исполнителпей и т.д(все это в сундуке страницы-края), также есть и глобальная память исполнителя.

сдесь паралельные вычисления не паралельны в реальности просто исполнитель исполнчет по слову за каждого мини исполнителя(количество слов на каждого исполнителя можно регулировать, также как и раставлять приорететы)
*/
